getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 1, 1, 2000, 3, 1, 2008, "d")
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 1, 1, 1990, 3, 1, 2008, "d")
dat
dat[1]
dat[1,1]
dat[2,1]
dat[1,2]
length(dat[1,])
length(dat[,1])
dat[1,length(dat[,1])]
dat[1,2085]
dat[1,2084]
dat <- getHistoricalYahooData("ADS.DE", 1, 1, 2000, 3, 1, 2008, "d")
dat[1,length(dat[,1])]
length(dat[,1])
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 1, 1, 2000, 3, 1, 2008, "d")
dat[1,length(dat[,1])]
length(dat[,1])
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# Daten sind ab 2. Januar 2001 verfügbar
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 3, 1, 2000, 3, 1, 2008, "d")
dat[1,length(dat[,1])]
length(dat[,1])
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# Daten sind ab 2. Januar 2001 verfügbar
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 3, 1, 2000, 3, 1, 2000, "d")
dat[1,length(dat[,1])]
length(dat[,1])
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# Daten sind ab 2. Januar 2001 verfügbar
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 3, 1, 2000, 3, 1, 2000, "d")
dat[1,length(dat[,1])]
length(dat[,1])
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# Daten sind ab 2. Januar 2001 verfügbar
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 31, 12, 1999, 3, 1, 2000, "d")
dat[1,length(dat[,1])]
length(dat[,1])
dat
# Funktion gibt historische Daten zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startTag, endTag - 1, 2, ..., 31, als Integer
# startMonat, endMonat - 1, 2, ..., 12 als Integer
# startJahr, endJahr - z.B. 2001 als Integer
# Daten sind ab 2. Januar 2001 verfügbar
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startTag, startMonat, startJahr, endTag, endMonat, endJahr, diskretisierung){
# Monate müssen im format "00", "01", ..., "11" angegeben werden
stringStartMonat <- formatC(startMonat - 1, width = 2, flag = "0")
stringEndMonat <- formatC(endMonat - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", stringStartMonat, "&b=", as.character(startTag), "&c=", as.character(startJahr), sep="")
endDatum <- paste("d=",stringEndMonat, "&e=", as.character(endTag), "&f=", as.character(endJahr), sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", 25, 12, 1999, 3, 1, 2000, "d")
dat
dat <- getHistoricalYahooData("ADS.DE", 3, 1, 2000, 3, 1, 2000, "d")
dat
dat <- getHistoricalYahooData("ADS.DE", 3, 1, 2000, 23, 5, 2016, "d")
dat[1,1]
dat[2,1]
dat[4246,1]
dat <- getHistoricalYahooData("ADS.DE", 1, 5, 2016, 23, 5, 2016, "d")
dat
Sys.time()
Sys.Date()
as.Date("2015-12-01")
as.Date("2015-13-01")
as.Date("2015-12-31")
as.Date("2015-12-32")
as.Date("2015-12-32")
as.Date("2015-12-31")
weekdays("2015-12-31")
weekdays(as.Date("2015-12-31"))
format(as.Date("2015-12-31"),"%d")
format(as.Date("2015-12-31"),"%m")
format(as.Date("2015-12-31"),"%y")
format(as.Date("2015-12-31"),"%Y")
format(as.Date("2015-12-31"),"%m")
as.Integer(format(as.Date("2015-12-31"),"%m"))
as.integer(format(as.Date("2015-12-31"),"%m"))
# Funktion gibt historische Daten von einschließlich 3. Januar 2001 verfügbar bis gestern zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startDatum, endDatum - im Format "YYYY-MM-DD", z.B. "2010-12-31", als String
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startDatum, endDatum, diskretisierung){
startDatum <- as.Date(startDatum)
endDatum <- as.Date(endDatum)
startTagChar <- format(startDatum,"%d")
startMonatInt <- as.integer(format(startDatum,"%m"))
startJahrChar <- format(startDatum,"%Y")
endTagChar <- format(endDatum,"%d")
endMonatInt <- as.integer(format(endDatum,"%m"))
endJahrChar <- format(endDatum,"%Y")
# Monate müssen im format "00", "01", ..., "11" angegeben werden
startMonatChar <- formatC(startMonatInt - 1, width = 2, flag = "0")
endMonatChar <- formatC(endMonatInt - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", startMonatChar, "&b=", startTagChar, "&c=", startJahrChar, sep="")
endDatum <- paste("d=",endMonatChar, "&e=", endTagChar, "&f=", endJahrChar, sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", "2016-5-1", "2016-6-23", "d")
dat
# Funktion gibt historische Daten von einschließlich 3. Januar 2001 verfügbar bis gestern zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startDatum, endDatum - im Format "YYYY-MM-DD", z.B. "2010-12-31", als String
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startDatum, endDatum, diskretisierung){
startDatum <- as.Date(startDatum)
endDatum <- as.Date(endDatum)
startTagChar <- format(startDatum,"%d")
startMonatInt <- as.integer(format(startDatum,"%m"))
startJahrChar <- format(startDatum,"%Y")
endTagChar <- format(endDatum,"%d")
endMonatInt <- as.integer(format(endDatum,"%m"))
endJahrChar <- format(endDatum,"%Y")
# Monate müssen im format "00", "01", ..., "11" angegeben werden
startMonatChar <- formatC(startMonatInt - 1, width = 2, flag = "0")
endMonatChar <- formatC(endMonatInt - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", startMonatChar, "&b=", startTagChar, "&c=", startJahrChar, sep="")
endDatum <- paste("d=",endMonatChar, "&e=", endTagChar, "&f=", endJahrChar, sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", "2016-5-1", "2016-5-23", "d")
dat
# Funktion gibt historische Daten von einschließlich 3. Januar 2001 verfügbar bis gestern zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startDatum, endDatum - im Format "YYYY-MM-DD", z.B. "2010-12-31", als String
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startDatum, endDatum, diskretisierung){
# gegebenes Start- und Enddatum wird als Datumstyp gecastet
startDatum <- as.Date(startDatum)
endDatum <- as.Date(endDatum)
#Tage und Jahre werden als Character gecastet
startTagChar <- format(startDatum,"%d")
startJahrChar <- format(startDatum,"%Y")
endTagChar <- format(endDatum,"%d")
endJahrChar <- format(endDatum,"%Y")
#Monate werden als Integer gecastet, weil sie weiterverarbeitet werden müssen
startMonatInt <- as.integer(format(startDatum,"%m"))
endMonatInt <- as.integer(format(endDatum,"%m"))
# Monate müssen im format "00", "01", ..., "11" angegeben werden
startMonatChar <- formatC(startMonatInt - 1, width = 2, flag = "0")
endMonatChar <- formatC(endMonatInt - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", startMonatChar, "&b=", startTagChar, "&c=", startJahrChar, sep="")
endDatum <- paste("d=",endMonatChar, "&e=", endTagChar, "&f=", endJahrChar, sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
dat <- getHistoricalYahooData("ADS.DE", "2016-5-1", "2016-5-23", "d")
dat
# Funktion gibt historische Daten von einschließlich 3. Januar 2001 verfügbar bis gestern zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startDatum, endDatum - im Format "YYYY-MM-DD", z.B. "2010-12-31", als String
# diskretisierung - d=tägliche Werte, w=wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
getHistoricalYahooData <- function(aktienSymbol, startDatum, endDatum, diskretisierung){
# gegebenes Start- und Enddatum wird als Datumstyp gecastet
startDatum <- as.Date(startDatum)
endDatum <- as.Date(endDatum)
#Tage und Jahre werden als Character gecastet
startTagChar <- format(startDatum,"%d")
startJahrChar <- format(startDatum,"%Y")
endTagChar <- format(endDatum,"%d")
endJahrChar <- format(endDatum,"%Y")
#Monate werden als Integer gecastet, weil sie weiterverarbeitet werden müssen
startMonatInt <- as.integer(format(startDatum,"%m"))
endMonatInt <- as.integer(format(endDatum,"%m"))
# Monate müssen im format "00", "01", ..., "11" angegeben werden
startMonatChar <- formatC(startMonatInt - 1, width = 2, flag = "0")
endMonatChar <- formatC(endMonatInt - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", startMonatChar, "&b=", startTagChar, "&c=", startJahrChar, sep="")
endDatum <- paste("d=",endMonatChar, "&e=", endTagChar, "&f=", endJahrChar, sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
return(read.csv(url))
}
zeitReiheAdidas <- getHistoricalYahooData("ADS.DE", "2015-5-1", "2016-5-23", "d")
zeitReiheFresenius <- getHistoricalYahooData("FME.DE", "2015-5-1", "2016-5-23", "d")
zeitReiheAdidas
zeitReiheFresenius
cov(cbind(zeitReihen[[1]]$Adj.Close,zeitReihen[[2]]$Adj.Close))
#
# Funktion gibt historische Daten von einschließlich 3. Januar 2001 verfügbar bis gestern zurück
#
# Input:
# aktienSymbol - Aktien-Symbol (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startDatum, endDatum - im Format "YYYY-MM-DD", z.B. "2010-12-31", als String
# diskretisierung - d=tägliche Werte, wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
# keinVolumen - FALSE=Beobachtungen mit Trade-Volumen gleich 0 werden ausgeschlossen, TRUE=solche Beobachtungen werden mit ausgegeben
#
# Quelle: http://brusdeylins.info/tips_and_tricks/yahoo-finance-api/
#
holeHistoricalYahooData <- function(aktienSymbol, startDatum, endDatum, diskretisierung, keinVolumen){
# gegebenes Start- und Enddatum wird als Datumstyp gecastet
startDatum <- as.Date(startDatum)
endDatum <- as.Date(endDatum)
# Tage und Jahre werden als Character gecastet
startTagChar <- format(startDatum,"%d")
startJahrChar <- format(startDatum,"%Y")
endTagChar <- format(endDatum,"%d")
endJahrChar <- format(endDatum,"%Y")
# Monate werden als Integer gecastet, weil sie weiterverarbeitet werden mÃ¼ssen
startMonatInt <- as.integer(format(startDatum,"%m"))
endMonatInt <- as.integer(format(endDatum,"%m"))
# Monate mÃ¼ssen im format "00", "01", ..., "11" angegeben werden
startMonatChar <- formatC(startMonatInt - 1, width = 2, flag = "0")
endMonatChar <- formatC(endMonatInt - 1, width = 2, flag = "0")
# Datum-Strings werden zusammengesetzt
startDatum <- paste("a=", startMonatChar, "&b=", startTagChar, "&c=", startJahrChar, sep="")
endDatum <- paste("d=",endMonatChar, "&e=", endTagChar, "&f=", endJahrChar, sep="")
# Gesamte URL wird zusammengesetzt
url <- paste("http://ichart.finance.yahoo.com/table.csv?s=", aktienSymbol,"&", startDatum, "&", endDatum, "&g=", as.character(diskretisierung), "&ignore=.cvs", sep="")
# Daten werden als Data.Frame abgelegt
data <- read.csv(url, header = TRUE, stringsAsFactors=FALSE)
# Beobachtungen mit Trade-Volumen gleich 0 werden ggf. ausgeschlossen
if (keinVolumen == FALSE){
data <- subset(data, Volume > 0)
}
return(data)
}
#
# Funktion gibt Liste von Zeitreihen verschiedener Aktien zurück
#
# Input:
# aktienSymbole - Vektor von Aktien-Symbolen (siehe Yahoo Finance, z.B. ADS.DE für Adidas AG Xetra), als String
# startDatum, endDatum - im Format "YYYY-MM-DD", z.B. "2010-12-31", als String
# diskretisierung - d=tägliche Werte, wöchentliche Werte, m=monatliche Werte, v=Dividendenausschüttungen, als String
# keinVolumen - FALSE=Beobachtungen mit Trade-Volumen gleich 0 werden ausgeschlossen, TRUE=solche Beobachtungen werden mit ausgegeben
#
holeZeitreihen <- function(aktienSymbole, startDatum, endDatum, diskretisierung, keinVolumen){
zeitReihen <- list()
for (i in 1:length(aktienSymbole)) {
zeitReihen[[i]] <- holeHistoricalYahooData(aktienSymbole[i], startDatum, endDatum, diskretisierung, keinVolumen)
}
return(zeitReihen)
}
#
# Funktion gibt für eine Liste von Zeitreihen einen Vektor alle Datums aus, die in allen Zeitreihen vorkommen
#
# Input:
# zeitReihen - Liste von Zeitreihen
#
holeDatumsSchnittmenge <- function(zeitReihen){
dates1 <- zeitReihen[[1]]$Date
for (i in 2:length(zeitReihen)){
dates2 <- zeitReihen[[i]]$Date
dates1 <- dates1[dates1 %in% dates2]
}
return(dates1)
}
#
# Funktion reduziert gegeben Zeitreihen auf gegeben Datums und gibt die reduzierte Zeitreihen zurück
#
# Input:
# zeitReihen - Liste von Zeitreihen
# datums - Vektor von Datums
#
reduziereZeitReihenAufDatums <- function(zeitReihen, datums){
for (i in 1:length(zeitReihen)){
zeitReihen[[i]] <- zeitReihen[[i]][zeitReihen[[1]]$Date %in% datums,]
}
return(zeitReihen)
}
aktienSymbole <- c("ADS.DE","^GDAXI")
zeitReihen <- holeZeitreihen(aktienSymbole, "2016-05-01", "2016-05-23", "d", FALSE)
datums <- holeDatumsSchnittmenge(zeitReihen)
zeitReihen <- reduziereZeitReihenAufDatums(zeitReihen, datums)
cov(cbind(zeitReihen[[1]]$Adj.Close,zeitReihen[[2]]$Adj.Close))
cov2cor(cbind(zeitReihen[[1]]$Adj.Close,zeitReihen[[2]]$Adj.Close))
cov2cor(cov(cbind(zeitReihen[[1]]$Adj.Close,zeitReihen[[2]]$Adj.Close)))
cov(cbind(zeitReihen[[1]]$Adj.Close,zeitReihen[[2]]$Adj.Close))
mean(zeitReihen[[1]]$Adj.Close)
mean(zeitReihen[[2]]$Adj.Close)
holeTagesWerte(aktienSymbole, "2016-05-16", FALSE, TRUE)
setwd("D:/Investment Tool")
source("Daten.R")
source("Analyse.R")
startDatum <- as.Date("2015-05-01")
endDatum <- as.Date("2016-05-23")
aktienSymbole <- as.vector(unlist(read.csv("Hilfsdaten/comdirectIndizes.csv", header = FALSE, sep = ";")))
gewichte <- holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d")
holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
holeTagesWerte(aktienSymbole, "2016-05-16", FALSE, TRUE)
holeTagesWert("^FTSE", "2016-05-16", TRUE)
holeTagesWert("^FTSE", "2016-05-15", TRUE)
sapply(c("^FTSE", "^GDAXI"), holeTagesWert, datum = "2016-05-15", vorwaertsSuchen = TRUE, simplify = TRUE)
holeTagesWert("^FTSE", "2016-05-15", TRUE)
holeTagesWert <- function(aktienSymbol, datum, vorwaertsSuchen){
datum <- holeNaechstenHandelstag(aktienSymbol = aktienSymbol, datum = datum, vorwaertsSuchen = vorwaertsSuchen)
return(holeZeitreihe(aktienSymbol = aktienSymbol, startDatum = datum, endDatum = datum, diskretisierung = "d", keinVolumenEinschliessen = FALSE)$Adj.Close)
}
holeTagesWert("^FTSE", "2016-05-15", TRUE)
sapply(c("^FTSE", "^GDAXI"), holeTagesWert, datum = "2016-05-15", vorwaertsSuchen = TRUE, simplify = TRUE)
holeTagesWert("^GDAXI", "2016-05-16", TRUE)
holeNaechstenHandelstag("^GDAXI", "2016-05-16", TRUE)
setwd("D:/Investment Tool")
source("Daten.R")
source("Analyse.R")
startDatum <- as.Date("2015-05-01")
endDatum <- as.Date("2016-05-23")
aktienSymbole <- as.vector(unlist(read.csv("Hilfsdaten/comdirectIndizes.csv", header = FALSE, sep = ";")))
gewichte <- holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d")
#holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
holeTagesWerte(aktienSymbole, "2016-05-16", FALSE, TRUE)
warnings()
holeNaechstenHandelstag("^STOXX50E", "2016-05-16", TRUE)
holeZeitreihe(aktienSymbol = "^STOXX50E", startDatum = "2016-05-16", endDatum = "2016-05-16", diskretisierung = "d", keinVolumenEinschliessen = FALSE)
holeZeitreihe(aktienSymbol = "^STOXX50E", startDatum = "2016-05-16", endDatum = "2015-05-16", diskretisierung = "d", keinVolumenEinschliessen = FALSE)
setwd("D:/Investment Tool")
source("Daten.R")
source("Analyse.R")
startDatum <- as.Date("2015-05-01")
endDatum <- as.Date("2016-05-23")
aktienSymbole <- as.vector(unlist(read.csv("Hilfsdaten/comdirectIndizes.csv", header = FALSE, sep = ";")))
gewichte <- holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d")
#holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
holeTagesWerte(aktienSymbole, "2016-05-12", FALSE, TRUE)
warnings()
setwd("D:/Investment Tool")
source("Daten.R")
source("Analyse.R")
startDatum <- as.Date("2015-05-01")
endDatum <- as.Date("2016-05-23")
aktienSymbole <- as.vector(unlist(read.csv("Hilfsdaten/comdirectIndizes.csv", header = FALSE, sep = ";")))
gewichte <- holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d")
#holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
holeTagesWerte(aktienSymbole, "2016-05-12", FALSE, TRUE)
setwd("D:/Investment Tool")
source("Daten.R")
source("Analyse.R")
startDatum <- as.Date("2015-05-01")
endDatum <- as.Date("2016-05-23")
aktienSymbole <- as.vector(unlist(read.csv("Hilfsdaten/comdirectIndizes.csv", header = FALSE, sep = ";")))
gewichte <- holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d")
#holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
holeTagesWerte(aktienSymbole, "2016-05-12", FALSE, TRUE)
holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
setwd("D:/Investment Tool")
source("Daten.R")
source("Analyse.R")
startDatum <- as.Date("2015-05-01")
endDatum <- as.Date("2016-05-23")
aktienSymbole <- as.vector(unlist(read.csv("Hilfsdaten/comdirectIndizes.csv", header = FALSE, sep = ";")))
gewichte <- holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d")
holePortfolioReturn(aktienSymbole, gewichte, startDatum, endDatum)
seq(startDatum, by = -100, length = 10)
sapply(seq(startDatum, by = -100, length = 10), holePortfolioReturn, aktienSymbole = aktienSymbole, gewichte = holeTangecyPortfolio(aktienSymbole, startDatum-100, startDatum-10, "d"), endDatum = startDatum + 30, simplify = TRUE)
